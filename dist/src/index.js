"use strict";
// Exportações principais\nexport { MultiClusterPostgres } from './cluster/MultiClusterPostgres';\nexport { ClusterManager } from './cluster/ClusterManager';\nexport { ClusterConfig } from './cluster/ClusterConfig';\nexport { ConnectionPool } from './cluster/ConnectionPool';\n\n// Re-exporta todos os tipos\nexport * from './types';\n\n// Exportações de utilitários (se houver)\n// export * from './utils';\n\n// Default export\nexport { MultiClusterPostgres as default } from './cluster/MultiClusterPostgres';\n\n// Versão do pacote\nexport const VERSION = '1.0.0';\n\n/**\n * Multi-Cluster PostgreSQL para Node.js com TypeScript\n * \n * Características:\n * - Multi-schema e multi-cluster support\n * - Read/Write splitting inteligente\n * - Load balancing com múltiplas estratégias\n * - Cache distribuído com invalidação\n * - Transações distribuídas\n * - Health checking e failover automático\n * - Métricas detalhadas\n * - Type-safe queries com TypeScript\n * \n * @example\n * ```typescript\n * import { MultiClusterPostgres } from 'multi-cluster-postgres';\n * \n * const postgres = new MultiClusterPostgres({\n *   enableCache: true,\n *   enableMetrics: true,\n *   enableTransactions: true\n * });\n * \n * await postgres.initialize({\n *   users_cluster: {\n *     schemas: ['users', 'auth'],\n *     primary: {\n *       host: 'localhost',\n *       port: 5432,\n *       database: 'app_users',\n *       user: 'postgres',\n *       password: 'password'\n *     },\n *     replicas: [{\n *       host: 'replica.localhost',\n *       port: 5432,\n *       database: 'app_users',\n *       user: 'postgres',\n *       password: 'password'\n *     }]\n *   }\n * });\n * \n * // Type-safe query\n * interface User {\n *   id: number;\n *   email: string;\n *   name: string;\n * }\n * \n * const users = await postgres.query<User>(\n *   'SELECT * FROM users WHERE active = $1',\n *   [true],\n *   { schema: 'users', cache: true }\n * );\n * \n * // Distributed transaction\n * await postgres.withTransaction(['users', 'orders'], async (tx) => {\n *   await tx.query('UPDATE users SET last_order = NOW() WHERE id = $1', [userId]);\n *   await tx.query('INSERT INTO orders (user_id, total) VALUES ($1, $2)', [userId, total]);\n * });\n * ```\n */"
//# sourceMappingURL=index.js.map